Tag Category Management - Coding Interview Challenge 
Overview 
Create a Tag Category Management system that allows users to view, create, edit, and delete tag categories. This challenge tests your ability to work with React, TypeScript, SASS modules, and modern web development practices. 
Time Allocation 
Recommended Time: 4-6 hours 
Technical Requirements 
Core Technologies 
● React (functional components with hooks) 
● TypeScript (strict typing required) 
● SASS Modules (for styling) 
● Git (version control) 
Deployment 
● Create a GitHub repository for your project 
● Deploy to Vercel, Netlify, or a similar free hosting platform 
● Provide both repository and live demo links 
Data Interface 
The TypeScript interfaces and enums are provided in a separate file (interfaces.ts) that you must import and use in your components. The main interface you'll be working with is ITagCategory, which extends IBaseModel and includes complex nested structures for metadata configuration and subcategories. 
Key Interface Notes: 
● ITagCategory is the main data structure for your cards 
● Import all interfaces and enums from the provided interfaces.ts file ● Pay special attention to complex fields like metadataConfig and subCategories ● Use proper TypeScript typing throughout your implementation
Feature Requirements 
Card Display Component 
● Create a TagCategoryCard component that displays tag category data ● Show key information: name, status, precision type, group, etc. ● Use an attractive, responsive design with SASS modules ● Include Edit and Delete action buttons 
Form Component 
● Create a TagCategoryForm component for creating/editing ● Support all fields from the ITagCategory interface 
● Handle complex fields like metadataConfig and subCategories ● Implement proper form validation 
● Support both create and edit modes (prefilled data for edit) CRUD Operations 
● Create: Add new tag categories 
● Read: Display existing tag categories 
● Update: Edit existing tag categories with prefilled form ● Delete: Remove tag categories with confirmation 
State Management 
● Use React hooks (useState, useEffect, etc.) 
● Maintain a list of tag categories in the component state ● Handle form state and validation 
● Generate proper timestamps and IDs for new entries 
Implementation Guidelines 
SASS Modules 
● Create .module.scss files for each component 
● Use modern CSS practices (Flexbox/Grid, CSS custom properties) ● Ensure responsive design 
● Implement hover effects and smooth transitions 
TypeScript Best Practices
● Use proper typing for all props, state, and functions 
● Implement proper error handling 
● Use discriminated unions where appropriate 
● Avoid any types 
Data Handling 
● Generate unique IDs for new items (UUID or timestamp-based) 
● Set proper createdAt and lastUpdatedAt timestamps 
● Handle the deleted flag (soft delete vs hard delete) 
● Provide default values for complex fields 
Sample Data 
Sample data is provided in a separate JSON file (sampleData.json), which contains multiple examples of tag categories. Import and use this data as your initial state to populate the interface and demonstrate functionality.
